{"version":3,"sources":["pages/crypto-currencies/index.js"],"names":["Cryptocurrencies","_ref","simplified","count","data","cryptosList","isFetching","useGetCryptosQuery","cryptos","setCryptos","useState","searchTerm","setSearchTerm","useEffect","_cryptosList$data$coi","_cryptosList$data","_cryptosList$data2","coins","filteredData","filter","item","name","toLowerCase","includes","_jsx","Loader","_jsxs","_Fragment","children","className","Input","placeholder","onChange","e","target","value","Row","gutter","map","currency","Col","xs","sm","lg","Link","to","concat","uuid","Card","title","rank","extra","src","iconUrl","hoverable","millify","price","marketCap","change"],"mappings":"4GAAA,wGAoEeA,UA7DUC,IAAqB,IAApB,WAAEC,GAAYD,EACtC,MAAME,EAAQD,EAAa,GAAK,KACxBE,KAAMC,EAAW,WAAEC,GAAeC,YAAmBJ,IACtDK,EAASC,GAAcC,mBAAS,KAChCC,EAAYC,GAAiBF,mBAAS,IAY7C,OAVAG,qBAAU,KAAO,IAADC,EAAAC,EAAAC,EACdP,EAAmC,QAAzBK,EAAY,OAAXT,QAAW,IAAXA,GAAiB,QAANU,EAAXV,EAAaD,YAAI,IAAAW,OAAN,EAAXA,EAAmBE,aAAK,IAAAH,IAAI,IAEvC,MAAMI,EAA0B,OAAXb,QAAW,IAAXA,GAAiB,QAANW,EAAXX,EAAaD,YAAI,IAAAY,OAAN,EAAXA,EAAmBC,MAAME,QAAQC,GACpDA,EAAKC,KAAKC,cAAcC,SAASZ,KAGnCF,EAAuB,OAAZS,QAAY,IAAZA,IAAgB,MAC1B,CAACb,EAAaM,IAEbL,EAAmBkB,cAACC,IAAM,IAG5BC,eAAAC,WAAA,CAAAC,SAAA,EACI1B,GACAsB,cAAA,OAAKK,UAAU,gBAAeD,SAC5BJ,cAACM,IAAK,CACJC,YAAY,wBACZC,SAAWC,GAAMrB,EAAcqB,EAAEC,OAAOC,MAAMb,mBAKpDE,cAACY,IAAG,CAACC,OAAQ,CAAC,GAAI,IAAKR,UAAU,wBAAuBD,SACrDpB,GACCA,EAAQ8B,KAAKC,GAETf,cAACgB,IAAG,CACFC,GAAI,GACJC,GAAI,GACJC,GAAI,EACJd,UAAU,cAAaD,SAGvBJ,cAACoB,IAAI,CAAqBC,GAAE,WAAAC,OAAaP,EAASQ,MAAOnB,SACvDF,eAACsB,IAAI,CACHC,MAAK,GAAAH,OAAKP,EAASW,KAAI,MAAAJ,OAAKP,EAASlB,MACrC8B,MACE3B,cAAA,OAAKK,UAAU,eAAeuB,IAAa,OAARb,QAAQ,IAARA,OAAQ,EAARA,EAAUc,UAE/CC,WAAS,EAAA1B,SAAA,CAETF,eAAA,KAAAE,SAAA,CAAG,UAAQ2B,IAAgB,OAARhB,QAAQ,IAARA,OAAQ,EAARA,EAAUiB,UAC7B9B,eAAA,KAAAE,SAAA,CAAG,eAAa2B,IAAgB,OAARhB,QAAQ,IAARA,OAAQ,EAARA,EAAUkB,cAClC/B,eAAA,KAAAE,SAAA,CAAG,iBAAuB,OAARW,QAAQ,IAARA,OAAQ,EAARA,EAAUmB,OAAO,WAV5BnB,EAASQ,OAFfR,EAASQ","file":"static/js/7.dabe4c27.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport millify from \"millify\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Row, Col, Input } from \"antd\";\r\nimport { useGetCryptosQuery } from \"../../services/cryptoApi\";\r\nimport Loader from \"../../components/Loader\";\r\n\r\nconst Cryptocurrencies = ({ simplified }) => {\r\n  const count = simplified ? 10 : 100;\r\n  const { data: cryptosList, isFetching } = useGetCryptosQuery(count);\r\n  const [cryptos, setCryptos] = useState([]);\r\n  const [searchTerm, setSearchTerm] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setCryptos(cryptosList?.data?.coins ?? []);\r\n\r\n    const filteredData = cryptosList?.data?.coins.filter((item) =>\r\n      item.name.toLowerCase().includes(searchTerm)\r\n    );\r\n\r\n    setCryptos(filteredData ?? []);\r\n  }, [cryptosList, searchTerm]);\r\n\r\n  if (isFetching) return <Loader />;\r\n\r\n  return (\r\n    <>\r\n      {!simplified && (\r\n        <div className=\"search-crypto\">\r\n          <Input\r\n            placeholder=\"Search Cryptocurrency\"\r\n            onChange={(e) => setSearchTerm(e.target.value.toLowerCase())}\r\n          />\r\n        </div>\r\n      )}\r\n\r\n      <Row gutter={[32, 32]} className=\"crypto-card-container\">\r\n        {cryptos &&\r\n          cryptos.map((currency) => {\r\n            return (\r\n              <Col\r\n                xs={24}\r\n                sm={12}\r\n                lg={6}\r\n                className=\"crypto-card\"\r\n                key={currency.uuid}\r\n              >\r\n                <Link key={currency.uuid} to={`/crypto/${currency.uuid}`}>\r\n                  <Card\r\n                    title={`${currency.rank}. ${currency.name}`}\r\n                    extra={\r\n                      <img className=\"crypto-image\" src={currency?.iconUrl} />\r\n                    }\r\n                    hoverable\r\n                  >\r\n                    <p>Price: {millify(currency?.price)}</p>\r\n                    <p>Market Cap: {millify(currency?.marketCap)}</p>\r\n                    <p>Daily Change: {currency?.change}%</p>\r\n                  </Card>\r\n                </Link>\r\n              </Col>\r\n            );\r\n          })}\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Cryptocurrencies;\r\n"],"sourceRoot":""}